<?xml version="1.0"?>

<launch>
  <!-- ADD IN THIS LINE IF USE BAG FILE FOR SIMULATION -->
  <param name="use_sim_time" value="false" />

  <!-- STATIC TF -->
  <node pkg="tf" type="static_transform_publisher" name="base_hokuyo_broadcaster" args="1.325 0 0.82 0 0 0 /base_link /laser 100"/>
 <!-- <node pkg="tf" type="static_transform_publisher" name="base_velodyne_broadcaster" args="0 0 1.72 -1.571 0 0 /toyota_footprint /velodyne 100"/> -->
  <node pkg="tf" type="static_transform_publisher" name="base_imu_broadcaster" args="-0.55 0 0.54 0 0 0 /base_link /imu 100"/>
  <node pkg="tf" type="static_transform_publisher" name="baselink_velodyne_broadcaster" args="0 0 1.72 -1.571 0 0 /base_link /velodyne 100"/> 
   <node pkg="tf" type="static_transform_publisher" name="baselink_frontaxle_broadcaster" args="1.045 0 0 0 0 0 /base_link /front_axle 100"/>

  <!-- SENSORS -->
  <include file="$(find toyota_launcher)/launch/sensors/velodyne_coms.launch"/>
  <include file="$(find toyota_launcher)/launch/sensors/hokuyo_coms.launch"/>
  <include file="$(find toyota_launcher)/launch/sensors/span_coms.launch"/>

  <node pkg="but_velodyne_proc" type="laser_scan" name="but_velodyne_proc_laserscan_node" output="screen">
    <remap from="points_in" to="/velodyne_points" />
    <remap from="scan_out" to="/velo_scan" />
    <param name="min_z" value="0.1" />
    <param name="max_z" value="100.0" />
    <param name="angular_res" value="0.2" />
    <param name="min_range" value="1.2" />
    <!--param name="frame_id" value="/velodyne" /-->
  </node>
 

  <!-- gmapping: requires odom, which is published by vrep in simulation, published by ekf in real -->
  <node pkg="gmapping" type="slam_gmapping" name="slam_gmapping" output="log">
    <remap from="scan" to="/scan"/>
    <param name="base_frame" value="base_link"/>
    <param name="odom_frame" value="odom"/>
    <param name="map_frame" value="map"/> 
    <param name="particles" value="1" />
    <param name="sigma" value ="0.00" />
    <param name="linearUpdate" value ="10000" />
    <param name="angularUpdate" value ="10000" />
    <param name="srr" value ="0.00" />
    <param name="srt" value ="0.00" />
    <param name="str" value ="0.00" />
    <param name="stt" value ="0.00" />
    <param name="xmin" value="-100" />
    <param name="xmax" value="100" />
    <param name="ymin" value="-100" />
    <param name="ymax" value="100" />
    <param name="minimumScore" value="10000" />
    <param name="temporalUpdate" value="1" />
    <param name="maxRange" value="30" />
    <param name="maxUrange" value="25" />
    <param name="map_update_interval" value="1.0" />
    <param name="delta" value="0.25" />
  </node> 

  <!-- Move base -->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base_node" output="screen">
    <param name="footprint_padding" value="0.01" />
    <param name="recovery_behavior_enabled" value="false" />
    <param name="clearing_rotation_allowed" value="false" />
    <param name="controller_frequency" value="10.0" />
    <param name="controller_patience" value="100.0" />

    <param name="base_global_planner" value="SBPLLatticePlanner" />
    
    <param name="base_local_planner" value="toyota_localplanner/ToyotaLocalPlanner" />

    <param name="SBPLLatticePlanner/primitive_filename" value="$(find sbpl)/matlab/mprim/toyota_025_6.mprim" />
    <rosparam file="$(find toyota_launcher)/launch/vehicle/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find toyota_launcher)/launch/vehicle/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find toyota_launcher)/launch/vehicle/local_costmap_params_close.yaml" command="load" />
    <rosparam file="$(find toyota_launcher)/launch/vehicle/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find toyota_launcher)/launch/vehicle/toyota_localplanner_params.yaml" command="load" />
    <rosparam file="$(find toyota_launcher)/launch/vehicle/sbpl_global_params.yaml" command="load" />
  </node> 

    
</launch>

  <!-- PLOT TRAJECTORY OF SOURCE FRAME 
  <node respawn="true" pkg="hector_trajectory_server" type="hector_trajectory_server" name="hector_trajectory_server" output="screen" >
    <param name="target_frame_name" type="string" value="/odom_scanmatcher" />
    <param name="source_frame_name" type="string" value="/toyota_footprint" />
    <param name="trajectory_update_rate" type="double" value="25" />
    <param name="trajectory_publish_rate" type="double" value="25" />
  </node> -->

  
    <!--TOPIC THROTTLE 
    <node pkg="topic_tools" type="throttle" name="velodyne_throttle" args="messages /velodyne_points 1 /velodyne_points_throttled" /> -->
     
 
  <!-- PCL FILTER CHAIN 
  <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen"/>

  <node pkg="nodelet" type="nodelet" name="voxel_grid" args="load pcl/VoxelGrid pcl_manager" output="screen">
        <remap from="~input" to="/velodyne_points_throttled"/>
        <remap from="~output" to="/velodyne_points_filtered"/>
        <rosparam>
          filter_field_name: z
          filter_limit_min: -1.45
          filter_limit_max: 15
          filter_limit_negative: False
          leaf_size: 0.1   
    </rosparam>
  </node>-->

  <!-- 2D LASER SCAN MATCHER: this source of odom might fial due to icp failure 
  <node pkg="laser_scan_matcher" type="laser_scan_matcher_node" name="hokuyo_matcher_node" output="screen">
        <param name="fixed_frame" value="odom"/>
        <param name="base_frame" value="base_link"/>
        <param name="use_imu" value="false"/>
        <param name="use_odom" value="false"/>
        <param name="use_vel" value="false"/>
        <param name="publish_pose" value="true"/>
        <param name="use_cloud_input" value="false"/>
        <remap from="cloud" to="/velodyne_points_filtered" />
        <remap from="scan"  to="/velo_scan" />
  </node> -->

  <!-- POINTCLOUD TO LASER SCAN 
  <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">
        <remap from="cloud_in" to="/velodyne_points"/>
        <remap from="scan" to="/velo_scan"/>
        <rosparam>
            #target_frame: camera_link # Leave disabled to output scan in pointcloud frame
            transform_tolerance: 0.01
            min_height: 0.15
            max_height: 10.0

            angle_min: -1.5708 # -M_PI/2
            angle_max: 1.5708 # M_PI/2
            angle_increment: 0.025 # M_PI/360.0
            scan_time: 0.1
            range_min: 0.45
            range_max: 40.0
            use_inf: true

            # Concurrency level, affects number of pointclouds queued for processing and number of threads used
            # 0 : Detect number of cores
            # 1 : Single threaded
            # 2->inf : Parallelism level
            concurrency_level: 1
        </rosparam>

    </node> -->

  
  



 <!-- <node pkg="nodelet" type="nodelet" name="passthroughX" args="load pcl/PassThrough pcl_manager" output="screen">
        <remap from="~input" to="/velodyne_points"/>
        <remap from="~output" to="/velodyne_points_filtered"/>
        <rosparam>
          filter_field_name: z
          filter_limit_min: 0.15
          filter_limit_max: 15
          filter_limit_negative: False
        </rosparam>
  </node> -->

